// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iDYgiKJB9Yi7CUB81stQBK
// Component: 5jjwlzFYfMqI
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: wRtWBmTexyYF/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_paziresh_24.module.css"; // plasmic-import: iDYgiKJB9Yi7CUB81stQBK/projectcss
import sty from "./PlasmicClaim.module.css"; // plasmic-import: 5jjwlzFYfMqI/css

createPlasmicElementProxy;

export const PlasmicClaim__VariantProps = new Array();

export const PlasmicClaim__ArgProps = new Array("information", "centers");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicClaim__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (() => {
    try {
      return $props.centers.every(center => center.status === 2);
    } catch (e) {
      if (
        e instanceof TypeError ||
        e?.plasmicType === "PlasmicUndefinedDataError"
      ) {
        return true;
      }
      throw e;
    }
  })() ? (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___5J4Mt
        )}
      >
        {
          "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0627\u062d\u0631\u0627\u0632 \u0647\u0648\u06cc\u062a \u0648 \u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u0627\u0644\u06a9\u06cc\u062a \u0635\u0641\u062d\u0647"
        }
      </div>
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
        onClick={async event => {
          const $steps = {};
          $steps["goToHttpswwwpaziresh24ComhomeintermediateRegistrationForm"] =
            true
              ? (() => {
                  const actionArgs = {
                    destination:
                      "https://www.paziresh24.com/home/intermediate-registration-form/"
                  };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps[
              "goToHttpswwwpaziresh24ComhomeintermediateRegistrationForm"
            ] != null &&
            typeof $steps[
              "goToHttpswwwpaziresh24ComhomeintermediateRegistrationForm"
            ] === "object" &&
            typeof $steps[
              "goToHttpswwwpaziresh24ComhomeintermediateRegistrationForm"
            ].then === "function"
          ) {
            $steps[
              "goToHttpswwwpaziresh24ComhomeintermediateRegistrationForm"
            ] = await $steps[
              "goToHttpswwwpaziresh24ComhomeintermediateRegistrationForm"
            ];
          }
        }}
        outline={true}
      >
        <React.Fragment>
          {(() => {
            try {
              return `من ${$props.information?.display_name} هستم`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "\u0645\u0646 \u062d\u0633\u06cc\u0646 \u062e\u06cc\u0631\u0627\u0646\u062f\u06cc\u0634 \u0647\u0633\u062a\u0645";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </Button>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__hXQhB
        )}
      >
        {
          "\u0627\u06cc\u0646 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u0647\u062f\u0641 \u062a\u0633\u0647\u06cc\u0644 \u062f\u0631 \u06cc\u0627\u0641\u062a\u0646 \u0627\u0639\u0636\u0627\u06cc \u062c\u0627\u0645\u0639\u0647 \u067e\u0632\u0634\u06a9\u06cc \u0648 \u062f\u0631 \u0631\u0627\u0633\u062a\u0627\u06cc \u0627\u062c\u0631\u0627\u06cc \u0642\u0627\u0646\u0648\u0646 \u0627\u0646\u062a\u0634\u0627\u0631 \u0648 \u062f\u0633\u062a\u0631\u0633\u06cc \u0622\u0632\u0627\u062f \u0628\u0647 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0645\u0635\u0648\u0628 \u0645\u062c\u0644\u0633 \u0634\u0648\u0631\u0627\u06cc \u0627\u0633\u0644\u0627\u0645\u06cc \u0627\u0631\u0627\u0626\u0647 \u0634\u062f\u0647 \u0627\u0633\u062a."
        }
      </div>
    </Stack__>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicClaim__ArgProps,
          internalVariantPropNames: PlasmicClaim__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicClaim__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicClaim";
  } else {
    func.displayName = `PlasmicClaim.${nodeName}`;
  }
  return func;
}

export const PlasmicClaim = Object.assign(
  // Top-level PlasmicClaim renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicClaim
    internalVariantProps: PlasmicClaim__VariantProps,
    internalArgProps: PlasmicClaim__ArgProps
  }
);

export default PlasmicClaim;
/* prettier-ignore-end */
