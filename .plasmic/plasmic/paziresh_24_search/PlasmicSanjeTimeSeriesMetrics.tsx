// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: 6BFYBWwqm50Z

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicSanjeTimeSeriesMetrics.module.css"; // plasmic-import: 6BFYBWwqm50Z/css

createPlasmicElementProxy;

export type PlasmicSanjeTimeSeriesMetrics__VariantMembers = {};
export type PlasmicSanjeTimeSeriesMetrics__VariantsArgs = {};
type VariantPropType = keyof PlasmicSanjeTimeSeriesMetrics__VariantsArgs;
export const PlasmicSanjeTimeSeriesMetrics__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSanjeTimeSeriesMetrics__ArgsType = {};
type ArgPropType = keyof PlasmicSanjeTimeSeriesMetrics__ArgsType;
export const PlasmicSanjeTimeSeriesMetrics__ArgProps = new Array<ArgPropType>();

export type PlasmicSanjeTimeSeriesMetrics__OverridesType = {
  root?: Flex__<"div">;
  chart?: Flex__<typeof SimpleChart>;
  table?: Flex__<typeof RichTable>;
};

export interface DefaultSanjeTimeSeriesMetricsProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSanjeTimeSeriesMetrics__RenderFunc(props: {
  variants: PlasmicSanjeTimeSeriesMetrics__VariantsArgs;
  args: PlasmicSanjeTimeSeriesMetrics__ArgsType;
  overrides: PlasmicSanjeTimeSeriesMetrics__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <SimpleChart
        data-plasmic-name={"chart"}
        data-plasmic-override={overrides.chart}
        className={classNames("__wab_instance", sty.chart)}
        data={[
          {
            formattedDate: "06/17/2024",
            jalaliofDate: "دوشنبه    ۱۴۰۳/۳/۲۸",
            metricValue: "77"
          },
          {
            formattedDate: "06/16/2024",
            jalaliofDate: "یکشنبه    ۱۴۰۳/۳/۲۷",
            metricValue: "140"
          },
          {
            formattedDate: "06/15/2024",
            jalaliofDate: "شنبه      ۱۴۰۳/۳/۲۶",
            metricValue: "68"
          },
          {
            formattedDate: "06/13/2024",
            jalaliofDate: "پنجشنبه   ۱۴۰۳/۳/۲۴",
            metricValue: "126"
          },
          {
            formattedDate: "06/12/2024",
            jalaliofDate: "چهارشنبه  ۱۴۰۳/۳/۲۳",
            metricValue: "200"
          },
          {
            formattedDate: "06/11/2024",
            jalaliofDate: "سه‌شنبه   ۱۴۰۳/۳/۲۲",
            metricValue: "134"
          },
          {
            formattedDate: "06/10/2024",
            jalaliofDate: "دوشنبه    ۱۴۰۳/۳/۲۱",
            metricValue: "94"
          },
          {
            formattedDate: "06/09/2024",
            jalaliofDate: "یکشنبه    ۱۴۰۳/۳/۲۰",
            metricValue: "124"
          },
          {
            formattedDate: "06/08/2024",
            jalaliofDate: "شنبه      ۱۴۰۳/۳/۱۹",
            metricValue: "165"
          },
          {
            formattedDate: "06/07/2024",
            jalaliofDate: "جمعه      ۱۴۰۳/۳/۱۸",
            metricValue: "74"
          },
          {
            formattedDate: "06/06/2024",
            jalaliofDate: "پنجشنبه   ۱۴۰۳/۳/۱۷",
            metricValue: "44"
          },
          {
            formattedDate: "06/05/2024",
            jalaliofDate: "چهارشنبه  ۱۴۰۳/۳/۱۶",
            metricValue: "149"
          },
          {
            formattedDate: "06/04/2024",
            jalaliofDate: "سه‌شنبه   ۱۴۰۳/۳/۱۵",
            metricValue: "134"
          },
          {
            formattedDate: "06/03/2024",
            jalaliofDate: "دوشنبه    ۱۴۰۳/۳/۱۴",
            metricValue: "226"
          },
          {
            formattedDate: "06/02/2024",
            jalaliofDate: "یکشنبه    ۱۴۰۳/۳/۱۳",
            metricValue: "54"
          }
        ]}
        direction={"vertical"}
        interactive={true}
        labelField={"jalaliofDate"}
        stacked={false}
        title={``}
        type={"bar"}
      />

      {(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.table),
          data: (() => {
            try {
              return [
                {
                  "نام کالا": "کالا ۱",
                  "شماره کالا": "۱۰۰۱"
                },
                {
                  "نام کالا": "کالا ۲",
                  "شماره کالا": "۱۰۰۲"
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
          onRowSelectionChanged: async (...eventArgs: any) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "selectedRowKey",
              ["table", "selectedRowKey"],
              RichTable_Helpers
            ).apply(null, eventArgs);
            generateStateOnChangePropForCodeComponents(
              $state,
              "selectedRow",
              ["table", "selectedRow"],
              RichTable_Helpers
            ).apply(null, eventArgs);
            generateStateOnChangePropForCodeComponents(
              $state,
              "selectedRows",
              ["table", "selectedRows"],
              RichTable_Helpers
            ).apply(null, eventArgs);
            generateStateOnChangePropForCodeComponents(
              $state,
              "selectedRowKeys",
              ["table", "selectedRowKeys"],
              RichTable_Helpers
            ).apply(null, eventArgs);
          },
          scopeClassName: sty["table__instance"],
          selectedRowKey: generateStateValueProp($state, [
            "table",
            "selectedRowKey"
          ]),
          selectedRowKeys: generateStateValueProp($state, [
            "table",
            "selectedRowKeys"
          ]),
          themeResetClassName: classNames(
            projectcss.root_reset,
            projectcss.root_reset_tags,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "selectedRowKey",
              plasmicStateName: "table.selectedRowKey"
            },
            {
              name: "selectedRow",
              plasmicStateName: "table.selectedRow"
            },
            {
              name: "selectedRows",
              plasmicStateName: "table.selectedRows"
            },
            {
              name: "selectedRowKeys",
              plasmicStateName: "table.selectedRowKeys"
            }
          ],
          [],
          RichTable_Helpers ?? {},
          child$Props
        );

        return (
          <RichTable
            data-plasmic-name={"table"}
            data-plasmic-override={overrides.table}
            {...child$Props}
          />
        );
      })()}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "chart", "table"],
  chart: ["chart"],
  table: ["table"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  chart: typeof SimpleChart;
  table: typeof RichTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSanjeTimeSeriesMetrics__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSanjeTimeSeriesMetrics__VariantsArgs;
    args?: PlasmicSanjeTimeSeriesMetrics__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSanjeTimeSeriesMetrics__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSanjeTimeSeriesMetrics__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSanjeTimeSeriesMetrics__ArgProps,
          internalVariantPropNames: PlasmicSanjeTimeSeriesMetrics__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSanjeTimeSeriesMetrics__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSanjeTimeSeriesMetrics";
  } else {
    func.displayName = `PlasmicSanjeTimeSeriesMetrics.${nodeName}`;
  }
  return func;
}

export const PlasmicSanjeTimeSeriesMetrics = Object.assign(
  // Top-level PlasmicSanjeTimeSeriesMetrics renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    chart: makeNodeComponent("chart"),
    table: makeNodeComponent("table"),

    // Metadata about props expected for PlasmicSanjeTimeSeriesMetrics
    internalVariantProps: PlasmicSanjeTimeSeriesMetrics__VariantProps,
    internalArgProps: PlasmicSanjeTimeSeriesMetrics__ArgProps
  }
);

export default PlasmicSanjeTimeSeriesMetrics;
/* prettier-ignore-end */
