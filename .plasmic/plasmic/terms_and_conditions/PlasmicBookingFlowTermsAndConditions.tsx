// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qtvEm4Gd8oQHZTsSZUTVzk
// Component: W97TJJMqOetd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import RtlProvider from "../../RtlProvider"; // plasmic-import: Rg8wZ0CpGCye/component
import Alert from "../../Alert"; // plasmic-import: dvBpky5d8iP9/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qtvEm4Gd8oQHZTsSZUTVzk/projectcss
import sty from "./PlasmicBookingFlowTermsAndConditions.module.css"; // plasmic-import: W97TJJMqOetd/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: Dp3atYu8GMFe/icon

createPlasmicElementProxy;

export type PlasmicBookingFlowTermsAndConditions__VariantMembers = {};
export type PlasmicBookingFlowTermsAndConditions__VariantsArgs = {};
type VariantPropType = keyof PlasmicBookingFlowTermsAndConditions__VariantsArgs;
export const PlasmicBookingFlowTermsAndConditions__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBookingFlowTermsAndConditions__ArgsType = {
  slug?: string;
  centerId?: string;
  serviceId?: string;
  showCenterBookingTermsAndCondition?: boolean;
};
type ArgPropType = keyof PlasmicBookingFlowTermsAndConditions__ArgsType;
export const PlasmicBookingFlowTermsAndConditions__ArgProps =
  new Array<ArgPropType>(
    "slug",
    "centerId",
    "serviceId",
    "showCenterBookingTermsAndCondition"
  );

export type PlasmicBookingFlowTermsAndConditions__OverridesType = {
  root?: Flex__<"div">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  rtlProvider?: Flex__<typeof RtlProvider>;
  alert?: Flex__<typeof Alert>;
  svg?: Flex__<"svg">;
};

export interface DefaultBookingFlowTermsAndConditionsProps {
  slug?: string;
  centerId?: string;
  serviceId?: string;
  showCenterBookingTermsAndCondition?: boolean;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBookingFlowTermsAndConditions__RenderFunc(props: {
  variants: PlasmicBookingFlowTermsAndConditions__VariantsArgs;
  args: PlasmicBookingFlowTermsAndConditions__ArgsType;
  overrides: PlasmicBookingFlowTermsAndConditions__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          showCenterBookingTermsAndCondition: false
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    (() => {
      try {
        return $props.showCenterBookingTermsAndCondition;
      } catch (e) {
        if (
          e instanceof TypeError ||
          e?.plasmicType === "PlasmicUndefinedDataError"
        ) {
          return true;
        }
        throw e;
      }
    })() ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_fragment_design_system_css.plasmic_tokens,
          sty.root
        )}
        dir={"rtl"}
      >
        <DataFetcher
          data-plasmic-name={"httpRestApiFetcher"}
          data-plasmic-override={overrides.httpRestApiFetcher}
          className={classNames("__wab_instance", sty.httpRestApiFetcher)}
          dataName={"fetchedData"}
          errorDisplay={null}
          errorName={"fetchError"}
          headers={{
            "Content-Type": "application/json",
            Accept: "application/json"
          }}
          loadingDisplay={null}
          method={"GET"}
          noLayout={false}
          previewErrorDisplay={false}
          previewSpinner={false}
          url={(() => {
            try {
              return `https://api.paziresh24.com/doctor/v1/full-profile/${$props.slug}/`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <DataCtxReader__>
            {$ctx =>
              (() => {
                try {
                  return (
                    $ctx.fetchedData.data.centers
                      .filter(c => c.id == $props.centerId)[0]
                      ?.services.filter(s => s.id == $props.serviceId)[0]
                      ?.terms_and_conditions ?? ""
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <RtlProvider
                  data-plasmic-name={"rtlProvider"}
                  data-plasmic-override={overrides.rtlProvider}
                  className={classNames("__wab_instance", sty.rtlProvider)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gWuj7
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return (
                              $ctx.fetchedData.data.centers
                                .filter(c => c.id == $props.centerId)[0]
                                ?.services.filter(
                                  s => s.id == $props.serviceId
                                )[0].terms_and_conditions ?? ""
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "This a term and condition test\nthis is second line";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                  <Alert
                    data-plasmic-name={"alert"}
                    data-plasmic-override={overrides.alert}
                    body={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hex3J
                        )}
                      >
                        {
                          "\u0632\u062f\u0646 \u062f\u06a9\u0645\u0647 \u0627\u062f\u0627\u0645\u0647 \u0628\u0647 \u0645\u0646\u0632\u0644\u0647 \u0642\u0628\u0648\u0644 \u0634\u0631\u0627\u06cc\u0637 \u0641\u0648\u0642 \u0645\u06cc \u0628\u0627\u0634\u062f"
                        }
                      </div>
                    }
                    className={classNames("__wab_instance", sty.alert)}
                    icon={
                      <IconIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    }
                    noHeader={true}
                  />
                </RtlProvider>
              ) : null
            }
          </DataCtxReader__>
        </DataFetcher>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "httpRestApiFetcher", "rtlProvider", "alert", "svg"],
  httpRestApiFetcher: ["httpRestApiFetcher", "rtlProvider", "alert", "svg"],
  rtlProvider: ["rtlProvider", "alert", "svg"],
  alert: ["alert", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpRestApiFetcher: typeof DataFetcher;
  rtlProvider: typeof RtlProvider;
  alert: typeof Alert;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBookingFlowTermsAndConditions__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBookingFlowTermsAndConditions__VariantsArgs;
    args?: PlasmicBookingFlowTermsAndConditions__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicBookingFlowTermsAndConditions__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicBookingFlowTermsAndConditions__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBookingFlowTermsAndConditions__ArgProps,
          internalVariantPropNames:
            PlasmicBookingFlowTermsAndConditions__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBookingFlowTermsAndConditions__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookingFlowTermsAndConditions";
  } else {
    func.displayName = `PlasmicBookingFlowTermsAndConditions.${nodeName}`;
  }
  return func;
}

export const PlasmicBookingFlowTermsAndConditions = Object.assign(
  // Top-level PlasmicBookingFlowTermsAndConditions renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    rtlProvider: makeNodeComponent("rtlProvider"),
    alert: makeNodeComponent("alert"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicBookingFlowTermsAndConditions
    internalVariantProps: PlasmicBookingFlowTermsAndConditions__VariantProps,
    internalArgProps: PlasmicBookingFlowTermsAndConditions__ArgProps
  }
);

export default PlasmicBookingFlowTermsAndConditions;
/* prettier-ignore-end */
